#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <conio.h> // Apenas para Windows, para usar getch()

// Definição das constantes para os elementos do jogo
#define PLAYER '&'
#define WALL '*'
#define KEY '@'
#define DOOR_CLOSED 'D'
#define DOOR_OPEN '='
#define MONSTER 'X'

// Função para imprimir o mapa
void printMap(char map[10][10], int playerX, int playerY, int monsterX, int monsterY) {
    system("cls"); // Limpa a tela
    int i, j; // Move a declaração das variáveis para antes do loop
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (i == playerY && j == playerX) {
                printf("%c ", PLAYER);
            } else if (i == monsterY && j == monsterX) {
                printf("%c ", MONSTER);
            } else {
                printf("%c ", map[i][j]);
            }
        }
        printf("\n");
    }
}

// Função para exibir o menu e obter a escolha do usuário
int exibirMenu() {
    int escolha;
    
    printf("Bem-vindo ao Jogo!\n");
    printf("1. Jogar\n");
    printf("2. Tutorial\n");
    printf("3. Sair\n");
    printf("Escolha uma opcao: ");
    scanf("%d", &escolha);
    
    return escolha;
}

// Função para exibir o tutorial
void exibirTutorial() {
    system("cls"); // Limpa a tela (funciona no Windows)
    
    printf("Tutorial:\n");
    printf("O jogo e do estilo aventura/puzzle onde o objetivo e o jogador conseguir passar de tres fases.\n");
    printf("Em cada fase o jogador deve se movimentar para pegar uma chave para abrir a porta fechada.\n");
    printf("O jogador possui os seguintes comando:\n");
    printf("P: O jogador pega a chave.");
    printf("I: O jogador abre a porta com a chave.");
    printf("W: O jogador movimenta uma unidade para cima;\n");
    printf("A: O jogador movimenta uma unidade para esquerda;\n");
    printf("S: O jogador movimenta uma unidade para baixo;\n");
    printf("D: O jogador movimenta uma unidade para direita;\n");
    printf("I: O jogador interage com o objeto que esta em cima.\n");
    printf("O jogo possui os seguintes elementos nas fases:\n");
    printf("&: Simbolo que representa o jogador.\n");
    printf("*: Simbolo que representa uma parede, o jogador ao se movimentar nao pode passar pela parede.\n");
    printf("@: Simbolo que representa a chave para abrir a porta para finalizar a fase, a porta abre no momento que o jogador interage com a chave.\n");
    printf("D: Simbolo que representa a porta fechada.\n");
    printf("=: Simbolo que representa a porta aberta quando o jogador interage com a chave.\n");
    printf("O: Simbolo que representa um botao que o usuario pode interagir, o botao fica no chao e o jogador deve ficar em cima dele para poder interagir.\n");
    printf("#: Simbolo que representa um espinho. A fase e reiniciada quando o jogador toca no espinho, caso a fase seja reiniciada tres vezes, o jogo volta para o menu principal.\n");
    printf(">: Simbolo que representa um teletransporte. O teletransporte sempre deve vir em pares, quando o jogador toca em um ele e transportado para o outro e vice-versa.\n");
    printf("X: Simbolo que representa o monstro nivel 1. Esse monstro tem um movimento aleatorio para cima, para esquerda, para baixo e para direita. Caso o monstro toque no jogador, a fase e reiniciada.\n");
    printf("V: Simbolo que representa o monstro nivel 2. Esse monstro tem uma inteligencia para seguir o jogador (ha varias maneiras de implementar isso). Caso o monstro toque no jogador, a fase e reiniciada.\n");
	printf("\n");
}

// Função principal do jogo
void jogarJogo() {
    char map[10][10] = {
        {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'},
        {'*', ' ', ' ', ' ', '*', ' ', '*', ' ', ' ', '*'},
        {'*', '*', '*', ' ', '*', ' ', '*', ' ', '*', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', '*', '*', '*', '*', '*', '*', '*', ' ', '*'},
        {'*', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '*'},
        {'*', ' ', ' ', '*', ' ', '*', '*', ' ', ' ', 'D'},
        {'*', '*', '*', '*', '*', '*', '*', '*', '*', '*'}
    };

    // Coloque a chave em uma posição adequada
    map[6][4] = KEY;

    // Coloque a porta para a próxima fase em uma posição adequada
    // map[8][8] = DOOR_CLOSED;

    int playerX = 1;
    int playerY = 1;
    int monsterX = 5;
    int monsterY = 5;
    int hasKey = 0;

    printMap(map, playerX, playerY, monsterX, monsterY);

    char move;
    while (1) {
        move = getch(); // Obtém a entrada do jogador
        int prevPlayerX = playerX;
        int prevPlayerY = playerY;
        switch (move) {
            case 'w':
                if (map[playerY - 1][playerX] != WALL) {
                    playerY--;
                }
                break;
            case 'a':
                if (map[playerY][playerX - 1] != WALL) {
                    playerX--;
                }
                break;
            case 's':
                if (map[playerY + 1][playerX] != WALL) {
                    playerY++;
                }
                break;
            case 'd':
                if (map[playerY][playerX + 1] != WALL) {
                    playerX++;
                }
                break;
            case 'p':
                if (map[playerY][playerX] == KEY) {
                    map[playerY][playerX] = ' ';
                    hasKey = 1;
                }
                break;
            case 'i':
                if (hasKey && map[playerY][playerX] == DOOR_CLOSED) {
                    map[playerY][playerX] = DOOR_OPEN;
                    printf("Voce abriu a porta!\n");
                }
                break;
        }

        // Movimento aleatório do monstro apenas quando o jogador se move
        if (map[playerY][playerX] != WALL && (playerX != prevPlayerX || playerY != prevPlayerY)) {
            int direction = rand() % 4; // Gerar um número aleatório de 0 a 3
            switch (direction) {
                case 0: // Movimento para cima
                    if (map[monsterY - 1][monsterX] != WALL) {
                        monsterY--;
                    }
                    break;
                case 1: // Movimento para esquerda
                    if (map[monsterY][monsterX - 1] != WALL) {
                        monsterX--;
                    }
                    break;
                case 2: // Movimento para baixo
                    if (map[monsterY + 1][monsterX] != WALL) {
                        monsterY++;
                    }
                    break;
                case 3: // Movimento para direita
                    if (map[monsterY][monsterX + 1] != WALL) {
                        monsterX++;
                    }
                    break;
            }
        }

        // Verificar se o jogador tocou no monstro
        if (playerX == monsterX && playerY == monsterY && hasKey == 1) {
            printf("Voce foi pego pelo monstro! Reiniciando a fase...\n");
            playerX = 1;
            playerY = 1;
            monsterX = 5;
            monsterY = 5;
            hasKey = 0; // Resetar a chave
            map[6][4] = KEY; // Reposicionar a chave
        } else if (playerX == monsterX && playerY == monsterY) {
            printf("Voce foi pego pelo monstro! Reiniciando a fase...\n");
            playerX = 1;
            playerY = 1;
            monsterX = 5;
            monsterY = 5;
        }

        printMap(map, playerX, playerY, monsterX, monsterY);
    }
}

int main() {
    int opcao;
    
    do {
        opcao = exibirMenu();
        
        switch(opcao) {
            case 1:
                printf("Iniciando o jogo...\n");
                jogarJogo();
                break;
            case 2:
                exibirTutorial();
                break;
            case 3:
                printf("Saindo do jogo. Ate mais!\n");
                break;
            default:
                printf("Opcao invalida. Tente novamente.\n");
        }
        
        system("pause"); // Pausa para visualizar a mensagem antes de limpar a tela
        system("cls");   // Limpa a tela (funciona no Windows)
        
    } while (opcao != 3);
    
    return 0;
}
